
@{
    ViewBag.Title = "ADDNEWPARTIALVIEW";
    Layout = null;
}
<div class="row">
    <div class="col-sm-3"></div>
    <div class="col-sm-3">
        <label>Enter Room Name</label>
        <input type="text" id="room-id" class="form-control form-control-sm" value="abcdef" autocorrect=off autocapitalize=off size=20>
        
        
    </div>
    <div class="col-sm-3" style="margin-top:3%">
        <button class="room-id-input-buttons" id="open-room">Open Room</button>
        <button class="room-id-input-buttons" id="join-room">Join Room</button>
    </div>
    <div class="col-sm-3"></div>
    @*<button class="room-id-input-buttons" id="open-or-join-room">Auto Open Or Join Room</button>*@
</div>


<div class="row" id="videos-container">
    
</div>

<div id="room-urls" style="text-align: center;display: none;background: #F1EDED;margin: 15px -10px;border: 1px solid rgb(189, 189, 189);border-left: 0;border-right: 0;"></div>

<link href="~/Content/getHTMLMediaElement.css" rel="stylesheet" />
<script src="~/Content/menu.js"></script>
<script src="~/Content/RTCMultiConnection.min.js"></script>
<script src="~/Content/adapter.js"></script>
<!-- custom layout for HTML5 audio/video elements -->
<script src="~/socket.io/socket.io.js"></script>

<script src="~/Content/getHTMLMediaElement.js"></script>
<script src="~/Content/RecordRTC.js"></script>

<script type="text/javascript">
    // ......................................................
    // .......................UI Code........................
    // ......................................................
    document.getElementById('open-room').onclick = function () {
        debugger;
        disableInputButtons();
        connection.open(document.getElementById('room-id').value, function (isRoomOpened, roomid, error) {
            if (isRoomOpened === true) {
                debugger
                //showRoomURL(roomid);
            } else {
                disableInputButtons(true);
                if (error === connection.errors.ROOM_NOT_AVAILABLE) {
                    BootstrapDialog.alert('Someone already created this room. Please either join or create a separate room.');
                    return;
                }
                BootstrapDialog.alert(error);
            }
        });
    };

    document.getElementById('join-room').onclick = function () {
        disableInputButtons();
        connection.join(document.getElementById('room-id').value, function (isJoinedRoom, roomid, error) {
            if (error) {
                disableInputButtons(true);
                if (error === connection.errors.ROOM_NOT_AVAILABLE) {
                    BootstrapDialog.alert('This room does not exist. Please either create it or wait for moderator to enter in the room.');
                    return;
                }
                if (error === connection.errors.ROOM_FULL) {
                    BootstrapDialog.alert('Room is full.');
                    return;
                }
                BootstrapDialog.alert(error);
            }
        });
    };

    // ......................................................
    // ..................RTCMultiConnection Code.............
    // ......................................................

    var connection = new RTCMultiConnection();

    // maximum two users are allowed to join single room
    connection.maxParticipantsAllowed = 2;

    // by default, socket.io server is assumed to be deployed on your own URL
    //connection.socketURL = '/';

    // comment-out below line if you do not have your own socket.io server
    connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';

    connection.socketMessageEvent = 'one-to-one-demo';

    connection.session = {
        audio: true,
        video: true
    };

    connection.sdpConstraints.mandatory = {
        OfferToReceiveAudio: true,
        OfferToReceiveVideo: true
    };

    connection.videosContainer = document.getElementById('videos-container');
    connection.onstream = function (event) {
        var existing = document.getElementById(event.streamid);
        if (existing && existing.parentNode) {
            existing.parentNode.removeChild(existing);
        }

        event.mediaElement.removeAttribute('src');
        event.mediaElement.removeAttribute('srcObject');
        event.mediaElement.muted = true;
        event.mediaElement.volume = 0;

        var video = document.createElement('video');

        try {
            video.setAttributeNode(document.createAttribute('autoplay'));
            video.setAttributeNode(document.createAttribute('playsinline'));
        } catch (e) {
            video.setAttribute('autoplay', true);
            video.setAttribute('playsinline', true);
        }

        if (event.type === 'local') {
            video.volume = 0;
            try {
                video.setAttributeNode(document.createAttribute('muted'));
            } catch (e) {
                video.setAttribute('muted', true);
            }
        }
        video.srcObject = event.stream;
        debugger;

        var width = parseInt(connection.videosContainer.clientWidth / 2);
        var mediaElement = getHTMLMediaElement(video, {
            title: event.userid,
            buttons: ['full-screen'],
            width: width,
            showOnMouseEnter: true
        });

        connection.videosContainer.appendChild(mediaElement);

        setTimeout(function () {
            mediaElement.media.play();
        }, 5000);

        mediaElement.id = event.streamid;

        // to keep room-id in cache
        localStorage.setItem(connection.socketMessageEvent, connection.sessionid);

        //if (event.type === 'local') {
        //    connection.socket.on('disconnect', function () {
        //        if (!connection.getAllParticipants().length) {
        //            location.reload();
        //        }
        //    });
        //}
    };

    connection.onstreamended = function (event) {
        var mediaElement = document.getElementById(event.streamid);
        if (mediaElement) {

            mediaElement.parentNode.removeChild(mediaElement);
            BootstrapDialog.alert("Connection Ended");
        }
    };

    connection.onMediaError = function (e) {
        if (e.message === 'Concurrent mic process limit.') {
            if (DetectRTC.audioInputDevices.length <= 1) {
                BootstrapDialog.alert('Please select external microphone. Check github issue number 483.');
                return;
            }

            var secondaryMic = DetectRTC.audioInputDevices[1].deviceId;
            connection.mediaConstraints.audio = {
                deviceId: secondaryMic
            };

            document.getElementById('join-room').onclick();
        }
    };

    // ..................................
    // ALL below scripts are redundant!!!
    // ..................................

    function disableInputButtons(enable) {
        debugger;
        document.getElementById('room-id').onkeyup();

        document.getElementById('open-room').disabled = !enable;
        document.getElementById('join-room').disabled = !enable;
        document.getElementById('room-id').disabled = !enable;
    }

    // ......................................................
    // ......................Handling Room-ID................
    // ......................................................

    //function showRoomURL(roomid) {
    //    debugger
    //    //var roomHashURL = '#' + roomid;
    //    //var roomQueryStringURL = '?roomid=' + roomid;

    //    var room = roomid;
    //    var html = '>Use this Id to Connect Anyone:  <a>' + room + '</a> </span>';

    //    //html += 'Hash URL: <a href="' + roomHashURL + '" target="_blank">' + roomHashURL + '</a>';
    //    //html += '<br>';
    //    //html += 'QueryString URL: <a href="' + roomQueryStringURL + '" target="_blank">' + roomQueryStringURL + '</a>';

    //    var roomURLsDiv = document.getElementById('room-urls');
    //    roomURLsDiv.innerHTML = html;

    //    roomURLsDiv.style.display = 'block';
    //}

    (function () {
        var params = {},
            r = /([^&=]+)=?([^&]*)/g;

        function d(s) {
            return decodeURIComponent(s.replace(/\+/g, ' '));
        }
        var match, search = window.location.search;
        while (match = r.exec(search.substring(1)))
            params[d(match[1])] = d(match[2]);
        window.params = params;
    })();

    var roomid = '';
    if (localStorage.getItem(connection.socketMessageEvent)) {
        roomid = localStorage.getItem(connection.socketMessageEvent);
    } else {
        roomid = connection.token();
    }

    var txtRoomId = document.getElementById('room-id');
    txtRoomId.value = roomid;
    txtRoomId.onkeyup = txtRoomId.oninput = txtRoomId.onpaste = function () {
        localStorage.setItem(connection.socketMessageEvent, document.getElementById('room-id').value);
    };

    var hashString = location.hash.replace('#', '');
    if (hashString.length && hashString.indexOf('comment-') == 0) {
        hashString = '';
    }

    var roomid = params.roomid;
    if (!roomid && hashString.length) {
        roomid = hashString;
    }

    if (roomid && roomid.length) {
        document.getElementById('room-id').value = roomid;
        localStorage.setItem(connection.socketMessageEvent, roomid);

        // auto-join-room
        (function reCheckRoomPresence() {
            connection.checkPresence(roomid, function (isRoomExist) {
                if (isRoomExist) {
                    document.getElementById('join-room').onclick();
                    return;
                }

                setTimeout(reCheckRoomPresence, 5000);
            });
        })();

        disableInputButtons();
    }

    // detect 2G
    if (navigator.connection &&
        navigator.connection.type === 'cellular' &&
        navigator.connection.downlinkMax <= 0.115) {
        BootstrapDialog.alert('2G is not supported. Please use a better internet service.');
    }
</script>

